import React, {Component} from 'react';
import GameCell from "components/GameField/GameCell";
import { times, shuffle, constant } from 'lodash'
import {connect} from "react-redux";
import './styles.scss'

class GameField extends Component {
    state = {
        settings: 25,
        arr: [],
        arrShuffle: [],
        score: {
            player: 0,
            computer: 0
        },
        finish: false
    };

    componentDidUpdate(prevProps, prevState, snapshot) {
        let { isActive } = this.props;

        if ( prevProps.isActive !== isActive ) this.startGame();
    }

    startGame(){
        let {
            delay,
            field,
        } = this.props.mode;

        const arr = times(field * field, constant(false));
        let arrShuffle = times(field * field, (i)=>i);
            arrShuffle = shuffle(arrShuffle);

        this.setState({
            arr: arr,
            arrShuffle: arrShuffle,
            score: {
                player: 0,
                computer: 0
            },
            finish: false,
        });

        this.activateRandomCell()
    }

    gameEnded(){
        console.log(`**** GAME ENDED: ${this.state.result.winner}`);

        this.setState({
            finish: true
        });

        clearTimeout(this.timer);
    }

    activateRandomCell() {
        if (this.checkForWinner()) return this.gameEnded();

        const { delay } = this.props.mode;

        if (this.timer) clearTimeout(this.timer);

        this.setNewRandomCell();

        this.timer = setTimeout(()=>{
            this.increaseScore('computer');
            this.activateRandomCell();
        }, delay);
    }

    setNewRandomCell(){
        this.setState((state)=>{
            const newCellId = state.idx >= 0 ? state.idx+1 : 0;

            return {
                idx: newCellId,
                activatedCellId: state.arrShuffle[newCellId]
            }
        });
    }

    checkForWinner() {
        const { score } = this.state;
        const { field } = this.props.mode;
        const middle = Math.ceil(field*field/2);
        let leader, leaderScore;

        if (score.player > score.computer) {
            leaderScore = score.player;
            leader = 'player';
        } else {
            leaderScore = score.computer;
            leader = 'computer';
        }

        if (leaderScore > middle) {
            this.setState({ result:  {
                    winner: leader,
                    date: new Date()
                }
            });
            return true;
        }

        return false
    }

    increaseScore = (unit) => {
        const { activatedCellId } = this.state;

        this.setState((state)=>{
            let { arr, score } = state;

            arr[activatedCellId] = unit;
            score[unit]+=1;

            return { arr, score };
        });
    };

    onGameCellClick = (idx) => {
        const { activatedCellId } = this.state;

        return (e) => {
            if (idx === activatedCellId) {
                this.increaseScore('player');

                this.activateRandomCell();
            }
        }
    };

    render() {
        let {
            state: {arr, activatedCellId},
            onGameCellClick
        } = this;

        return (
            <div className={'game-field__container'}>
                {
                    arr.map(( cell, idx )=>
                        <GameCell key={idx} idx={idx} activatedCellId={activatedCellId} status={cell} handleClick={onGameCellClick(idx)}/>
                    )
                }
            </div>
        );
    }
}

function mapStateToProps(state) {
    let {
        gameSettings: {
            status: {
                mode,
                isActive,
                player
            }
        }
    } = state;
    return {
        mode,
        isActive,
        player
    };
}

export default connect(mapStateToProps,)(GameField);